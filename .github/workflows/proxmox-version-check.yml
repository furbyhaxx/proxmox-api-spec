name: Proxmox Version Check

on:
  workflow_dispatch:
  schedule:
    - cron: '0 0 * * *'  # run daily at midnight

permissions:
  contents: write

jobs:
  get_versions:
    name: Get Missing Proxmox Versions
    runs-on: ubuntu-latest

    outputs:
      matrix: ${{ steps.generate.outputs.matrix }}

    steps:
      - name: Check out repository
        uses: actions/checkout@v3

      - name: Make script executable
        run: chmod +x scripts/generate-version-list.sh

      - name: Generate version list and filter existing tags
        id: generate
        run: |
          # Fetch latest tags from remote
          git fetch --prune --tags

          # Run the script to get lines in the format "distro/version"
          versions=$(./scripts/generate-version-list.sh | sort)

          echo "Found versions:"
          echo "$versions"

          # build a JSON array for the matrix strategy
          to_matrix="[]"

          # Install jq if it does not exist
          if ! command -v jq 2>&1 >/dev/null;then
              sudo apt-get update -y && sudo apt-get install -y jq > /dev/null 2>&1
          fi

          # Loop over each line "distro/version"
          for line in $versions; do
            distro=$(echo "$line" | cut -d/ -f2)
            version=$(echo "$line" | cut -d/ -f1)

            # Check if the tag already exists locally
            if git rev-parse -q --verify "refs/tags/$version" >/dev/null; then
              echo "Tag $version already exists. Skipping."
            else
              # Add to JSON array for matrix
              to_matrix=$(echo "$to_matrix" | jq --arg distro "$distro" --arg version "$version" '. + [{"distro": $distro, "version": $version}]')
            fi
          done

          # Store JSON in matrix
          to_matrix=$(echo "$to_matrix" | jq -c . )
          echo "matrix=$to_matrix" >> $GITHUB_OUTPUT

  dump_and_release:
    name: Process Release
    runs-on: ubuntu-latest
    needs: get_versions
    strategy:
      fail-fast: false
      matrix:
        distro-version: ${{ fromJson(needs.get_versions.outputs.matrix) }}

    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          persist-credentials: true

      - name: Prepare
        id: prepare
        run: |
          echo "distro=${{ matrix.distro-version.distro }}" >> "$GITHUB_OUTPUT"
          echo "proxmox_version=${{ matrix.distro-version.version }}" >> "$GITHUB_OUTPUT"

      - name: Setup Container
        run: |
          DISTRO="${{ steps.prepare.outputs.distro }}"
          PROXMOX_VERSION="${{ steps.prepare.outputs.proxmox_version }}"
          docker_tag="proxmox-dump-schema:${PROXMOX_VERSION}"
          schema_file="proxmox-api-schema-${PROXMOX_VERSION}.json"

          echo "Building container for distro=$DISTRO and version=$PROXMOX_VERSION"

          sudo chmod +x dump-schema/dump-schema.pl

          # Build Docker image
          docker build --platform=linux/amd64 \
            --tag "proxmox-api" \
            --build-arg DISTRO="${DISTRO}" \
            --build-arg PROXMOX_VERSION="${PROXMOX_VERSION}" \
            "./dump-schema"

      - name: Dump API
        id: extract_api
        run: |
          DISTRO="${{ steps.prepare.outputs.distro }}"
          PROXMOX_VERSION="${{ steps.prepare.outputs.proxmox_version }}"

          echo "Running container and dumping API schema"

          # Run the container and execute dump script
          docker run --rm proxmox-api \
            perl /app/dump-schema.pl > "proxmox-ve-api-${PROXMOX_VERSION}.json"

          echo "Generated proxmox-ve-api-${PROXMOX_VERSION}.json"

          echo ""

#          echo "$(cat "proxmox-ve-api-${PROXMOX_VERSION}.json")"

      - name: Commit and push
        run: |
          set -e
          PROXMOX_VERSION="${{ steps.prepare.outputs.proxmox_version }}"

          # Config
          MAX_RETRIES=5
          RETRY_DELAY=5

          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

          # Create new tag
          git tag "${PROXMOX_VERSION}" || true

          # Add schema file
          git add "proxmox-ve-api-${PROXMOX_VERSION}.json"

          # Try commit
          git commit -m "Add proxmox-ve-api-${PROXMOX_VERSION}.json" || echo "Nothing to commit"

          ATTEMPT=1

          # try push loop
          while [ $ATTEMPT -le $MAX_RETRIES ]
          do
            echo "Push attempt #$ATTEMPT..."

            # Stash local changes
            git stash --include-untracked

          # Fetch and rebase
          git pull --rebase

            # Re-apply stashed changes
            # --quiet avoids noisy conflict output, remove if you need to debug
            git stash pop --quiet || true

            # Stage and commit again if needed
            git add "proxmox-ve-api-${PROXMOX_VERSION}.json"
            git commit -m "Add proxmox-ve-api-${PROXMOX_VERSION}.json" || echo "Nothing to commit"
          
            # Try pushing the commit
            if git push origin HEAD; then
              echo "Successfully pushed commit to origin."
          
              # Now push tag as well
              if git push origin "${PROXMOX_VERSION}"; then
                echo "Successfully pushed tag ${PROXMOX_VERSION} to origin."
                break
              else
                echo "Failed to push tag ${PROXMOX_VERSION}."
              fi
            else
              echo "Failed to push to origin."
            fi
      
            if [ $ATTEMPT -eq $MAX_RETRIES ]; then
              echo "Reached max retries ($MAX_RETRIES). Failing..."
              exit 1
            else
              echo "Retrying in ${RETRY_DELAY} seconds..."
              sleep $RETRY_DELAY
            fi
      
            ATTEMPT=$((ATTEMPT+1))
          done
          

      - name: Create Release
        uses: softprops/action-gh-release@v2
        #        if: ${{ hashFiles("proxmox-ve-api-${{ steps.prepare.outputs.proxmox_version }}.json") != '' }}
        with:
          tag_name: ${{ steps.prepare.outputs.proxmox_version }}
          name: "Proxmox VE API Schema ${{ steps.prepare.outputs.proxmox_version }}"
          body: "Includes proxmox-ve-api-${{ steps.prepare.outputs.proxmox_version }}.json"
          draft: false
          prerelease: false
          files: proxmox-ve-api-${{ steps.prepare.outputs.proxmox_version }}.json
